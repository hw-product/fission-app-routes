= bootstrap_form_tag form_opts.merge(:html => {:id => 'route-form'}) do |f|
  = f.text_field :name, :value => @route ? @route.name : nil, :disabled => !!@route, :autofocus => true
  = f.text_field :description, :value => @route ? @route.description : nil

  = render :partial => 'route_builder_advanced', :locals => {:route_items => @route ? @route.route_list : []}

  #route-configs-list
    - if @route
      - @route.route_configs.each do |r_config|
        = render :partial => 'route_config', :locals => {:config => r_config, :rules => @match_rules, :configs => @configs}
    = link_to 'Add Configurator', add_config_routes_path, :class => 'btn btn-primary pull-right', :role => 'button', :remote => true, :id => 'config-adder'

  .clearfix
  %br

  #route-payload-filter
    - if @route
      - @route.route_payload_filters.each do |r_filter|
        = render :partial => 'route_filter', :locals => {:filter => r_filter, :rules => @match_rules}
    = link_to 'Add Filter', add_filter_routes_path, :class => 'btn btn-primary pull-right', :role => 'button', :remote => true, :id => 'filter-adder'

  .clearfix

  = f.submit 'Save', :disable_with => 'Save...', :class => 'btn btn-success'

:javascript
  $(document).ready(
    function(){
      $('[data-toggle="tooltip"]').tooltip();
      $("#route-items, #all-services, #all-service-groups, #all-custom-services").sortable({
        connectWith: ".services-connector",
        receive: function(event, ui){
          if(!ui.item.parent().is("." + ui.item.attr('class').split(' ').join(', .'))){
            ui.sender.sortable('cancel');
          }
        }
      }).disableSelection();

      $('#route-configs-list').sortable().disableSelection();
      $('#route-form').submit(function(event){
        $('#route-items li').each(function(idx){
          idx++;
          $('#route-form').append('<input type="hidden" name="' + $(this).attr('item_type') + '[' + idx + ']" value="' + $(this).attr('item_id') + '" />');
        });
        $('#route-form .route-config').each(
          function(idx, item){
            config_id = item.id;
            config_elm = $(item);
            config_name = 'configs[' + config_id + ']';
            $('#route-form').append('<input type="hidden" name="' + config_name + '[name]" value="' + $('#' + config_id + '-name').val() + '" />');
            $('#route-form').append('<input type="hidden" name="' + config_name + '[description]" value="' + $('#' + config_id + '-description').val() + '" />');
            config_elm.find('.config-pack li').each(
              function(c_idx, c_item){
                $('#route-form').append('<input type="hidden" name="' + config_name + '[config_id][]" value="' + $(c_item).attr('config_id') + '" />');
              }
            );
            config_elm.find('.config-rule').each(
              function(r_idx, r_item){
                $('#route-form').append('<input type="hidden" name="' + config_name + '[rule_id][' + r_idx + '][' + $(r_item).attr('rule_id') + ']" value="' + $(r_item).attr('rule_value') + '" />');
              }
            );
          }
        );
        $('#route-form .route-filter').each(
          function(idx, item){
            filter_id = item.id
            filter_elm = $(item);
            filter_name = 'filters[' + filter_id + ']';
            $('#route-form').append('<input type="hidden" name="' + filter_name + '[name]" value="' + $('#' + filter_id + '-name').val() + '" />');
            $('#route-form').append('<input type="hidden" name="' + filter_name + '[description]" value="' + $('#' + filter_id + '-description').val() + '" />');
            filter_elm.find('.filter-rule').each(
              function(r_idx, r_item){
                $('#route-form').append('<input type="hidden" name="' + filter_name + '[rule_id][' + r_idx + '][' + $(r_item).attr('rule_id') + ']" value="' + $(r_item).attr('rule_value') + '" />');
              }
            );
          }
        );
      });
    }
  );
